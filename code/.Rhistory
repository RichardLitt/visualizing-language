best.features
11:width
11:width-10
(11:width)-10
sorted.features
sorted.features = sort(colMeans(is.na(geo_data[,11:ncol(geo_data)])))
names(sorted.features)
sorted.features
best.features = sorted.features[1:15]
best.features
data.subset = t(geo_data[,as.numeric(names(best.features))])
colnames(data.subset) = get.language(geo_data$V10)
rownames(data.subset) = get.feature(names(best.features),shift=0)
head(data.subset)
head(geo_data)
colnames(data.subset) = get.language(geo_data$wals_code)
rownames(data.subset) = get.feature(names(best.features),shift=0)
colnames(data.subset) = get.language(geo_data$wals_code)
get.language(geo_data$wals_code)
language = "yim"
i = 1
language.list[which(language.list[,1]==language[i]),2]
language = NA
language.list[which(language.list[,1]==language[i]),2]
x = language.list[which(language.list[,1]==language[i]),2]
x
x = rep(NA,5)
x[1] = language.list[which(language.list[,1]==language[i]),2]
x[2] = language.list[which(language.list[,1]==language[i]),2]
character(0)
class(character(0))
is.string(character(0))
is.character(character(0))
is.empty(character(0))
is.null(character(0))
emptyenv()
get.language = function(language) {#
	names = rep(NA,length(language))#
	for(i in 1:length(language)) {#
		thisname = language.list[which(language.list[,1]==language[i]),2]#
		if(length(thisname)>0) {#
			names[i] = thisname#
		} else {#
			names[i] = NA#
		}#
	}#
	return(names)#
}
colnames(data.subset) = get.language(geo_data$wals_code)
colnames(data.subset) = get.language(geo_data$wals_code)
head(data.subset)
names(geo_data)
data.subset = t(geo_data[,c(7,as.numeric(names(best.features)))])
head(data.subset)
levels(geo_data$center.language)
make.feature.subset = function(language) {#
	data.subset = t(geo_data[which(geo_data$center.language==language),as.numeric(names(best.features))])#
	colnames(data.subset) = get.language(geo_data$wals_code)#
	rownames(data.subset) = get.feature(names(best.features),shift=0)#
#
	return(data.subset)#
}
data.subset.ala = make.feature.subset("ala")
language = "ala"
	data.subset = t(geo_data[which(geo_data$center.language==language),as.numeric(names(best.features))])
	colnames(data.subset) = get.language(geo_data$wals_code)
head(get.language(geo_data$wals_code))
length(get.language(geo_data$wals_code))
dim(data.subset)
colnames(data.subset)
rownames(data.subset)
get.language(rownames(data.subset))
get.language(as.character(rownames(data.subset)))
get.language(geo_data$wals_code[rownames(data.subset)])
(geo_data$wals_code[rownames(data.subset)])
(geo_data$wals_code[as.numeric(rownames(data.subset))])
get.language(geo_data$wals_code[as.numeric(rownames(data.subset))])
get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=0)
	data.subset = geo_data[which(geo_data$center.language==language),as.numeric(names(best.features))]
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=0)
	data.subset = t(geo_data[which(geo_data$center.language==language),as.numeric(names(best.features))])
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=0)
head(data.subset)
make.feature.subset = function(language) {#
	data.subset = t(geo_data[which(geo_data$center.language==language),as.numeric(names(best.features))])#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=0)#
	#
	return(data.subset)#
}
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,as.numeric(names(best.features)))
)
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,as.numeric(names(best.features)))]
dim(data.subset)
head(data.subset)
order(data.subset$X.distance.from.centre)
data.subset[order(data.subset$X.distance.from.centre),]
data.subset[,11:ncol(data.subset)]
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,as.numeric(names(best.features)))]#
#
# Re-order the rows in terms of distance from center#
# (This is being done simply for now)#
	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=0)
heatmap(data.subset,Rowv=NA,Colv=NA)
make.feature.subset = function(language) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,as.numeric(names(best.features)))]#
#
# Re-order the rows in terms of distance from center#
# (This is being done simply for now)#
	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=0)#
	#
	return(data.subset)#
}
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
heatmap(data.subset.arp,Rowv=NA,Colv=NA)
heatmap(data.subset.awt,Rowv=NA,Colv=NA)
heatmap(data.subset.kew,Rowv=NA,Colv=NA)
heatmap(data.subset.kob,Rowv=NA,Colv=NA)
heatmap(data.subset.yim,Rowv=NA,Colv=NA)
heatmap(data.subset.ala,Rowv=NA,Colv=NA,scale="none")
?heatmpa
?heatmap
heatmap(data.subset.yim,Rowv=NA,Colv=NA,scale="none")
heatmap(data.subset.yim,Rowv=NA,Colv=NA,scale=)
heatmap(data.subset.yim,Rowv=NA,Colv=NA,scale="none")
data.subset = t(geo_data[,as.numeric(names(best.features))])#
#
colnames(data.subset) = get.language(geo_data$V10)#
rownames(data.subset) = get.feature(names(best.features),shift=10)#
#
# Now to re-order the columns (the languages) of the subset#
# so that they are arranged in order.#
# Oh, we can't do that, because we don't know what everything#
# is relative to.#
#
# The data have lots of repetitions. I'm not 100% sure what's#
# going on; each language seems to be in there 6 times. The #
# difference is in columns V4 through V8, so I presume that's#
# geographic distance to some language; but the language is#
# unspecified, which is annoying. Richard, you need to learn#
# how to make column headers, or provide the information in #
# a comment or file somewhere.#
# Remove the duplicates.#
data.subset = t(unique(t(data.subset)))
heatmap(data.subset,Rowv=NA,Colv=NA)
best.features
sorted.features
dim(data.subset)
data.subset = t(geo_data[,as.numeric(names(best.features))])
dim(data.subset)
levels(geo_data$wals_code)
length(levels(geo_data$wals_code))
get.feature(168)
heatmap(data.subset,Rowv=NA,Colv=NA)
data.subset = t(unique(t(data.subset)))
heatmap(data.subset,Rowv=NULL,Colv=NULL)
heatmap(data.subset,Rowv=NA,Colv=NA)
rownames(data.subset) = get.feature(names(best.features),shift=10)
heatmap(data.subset,Rowv=NA,Colv=NA)
get.feature(100)
sorted.features["100"]
names(best.features)
data.subset = t(geo_data[,as.numeric(names(best.features))])
rownames(data.subset)
as.numeric(best.features)
as.numeric(names(best.features))
intersect(rownames(data.subset),names(best.features)
()
)
intersect(rownames(data.subset),names(best.features))
names(best.features)
names(geo_data)
best.features
c(1:10,as.numeric(names(best.features)))
c(1:10,(as.numeric(names(best.features+10))))
c(1:10,(as.numeric(names(best.features)+10)))
c(1:10,(as.numeric(names(best.features))+10))
geo_data = read.table("data_new/geo-clean-30-datapoints-r-500-fixed.csv",sep="\t",quote="\"",header=T)#
#
# Let's determine which features to plot. We want to use#
# the features with the fewest most data, i.e. fewest NAs #
# in them. First, we take the relevant columns (11 and up)#
# and ensure that they are numeric.#
width = ncol(geo_data)#
geo_data[,11:width] = sapply(geo_data[,11:width],as.numeric)#
#
# Normalize all the feature columns.#
geo_data[,11:width] = scale(geo_data[,11:width])#
#
# Change the feature column names to simple numbers. This#
# aids the lookup process later.#
names(geo_data)[11:width] = as.character((11:width))#
#
#This function sorts all the columns of the data#
# by how many NAs they have. The numbers in this#
# vector are the proportion of the column that is#
# NA.#
sorted.features = sort(colMeans(is.na(geo_data[,11:ncol(geo_data)])))#
#
# Remove the V's from the colnames#
#names(sorted.features) = substr(names(sorted.features),2,4)#
#
# Get the 15 best-represented features#
best.features = sorted.features[1:15]#
#
#
make.feature.subset = function(language) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Re-order the rows in terms of distance from center#
# (This is being done simply for now)#
	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
	#
	return(data.subset)#
}
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")
heatmap(data.subset.ala,Rowv=NA,Colv=NA,scale="none")
heatmap(data.subset.arp,Rowv=NA,Colv=NA)
heatmap(data.subset.ala,Rowv=NA,Colv=NA,scale="none")
quartz(())
quartz()
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
par(oma=c(2,2,2,20))
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
source("subs.R")
geo_data = read.table("data_new/geo-clean-30-datapoints-r-500-fixed.csv",sep="\t",quote="\"",header=T)#
#
# Let's determine which features to plot. We want to use#
# the features with the fewest most data, i.e. fewest NAs #
# in them. First, we take the relevant columns (11 and up)#
# and ensure that they are numeric.#
width = ncol(geo_data)#
geo_data[,11:width] = sapply(geo_data[,11:width],as.numeric)#
#
# Normalize all the feature columns.#
geo_data[,11:width] = scale(geo_data[,11:width])#
#
# Change the feature column names to simple numbers. This#
# aids the lookup process later.#
names(geo_data)[11:width] = as.character((11:width))#
#
#This function sorts all the columns of the data#
# by how many NAs they have. The numbers in this#
# vector are the proportion of the column that is#
# NA.#
sorted.features = sort(colMeans(is.na(geo_data[,11:ncol(geo_data)])))#
#
# Remove the V's from the colnames#
#names(sorted.features) = substr(names(sorted.features),2,4)#
#
# Get the 15 best-represented features#
best.features = sorted.features[1:15]#
#
#
make.feature.subset = function(language) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Re-order the rows in terms of distance from center#
# (This is being done simply for now)#
	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
	#
	return(data.subset)#
}#
#
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")
par(oma=c(2,2,2,20))
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
par(oma=c(2,2,2,15))
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
par(oma=c(2,2,2,16))
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
source("subs.R")#
#
geo_data = read.table("data_new/geo-clean-30-datapoints-r-500-fixed.csv",sep="\t",quote="\"",header=T)#
#
# Let's determine which features to plot. We want to use#
# the features with the fewest most data, i.e. fewest NAs #
# in them. First, we take the relevant columns (11 and up)#
# and ensure that they are numeric.#
width = ncol(geo_data)#
geo_data[,11:width] = sapply(geo_data[,11:width],as.numeric)#
#
# Normalize all the feature columns.#
geo_data[,11:width] = scale(geo_data[,11:width])#
#
# Change the feature column names to simple numbers. This#
# aids the lookup process later.#
names(geo_data)[11:width] = as.character((11:width))#
#
#This function sorts all the columns of the data#
# by how many NAs they have. The numbers in this#
# vector are the proportion of the column that is#
# NA.#
sorted.features = sort(colMeans(is.na(geo_data[,11:ncol(geo_data)])))#
#
# Remove the V's from the colnames#
#names(sorted.features) = substr(names(sorted.features),2,4)#
#
# Get the 15 best-represented features#
best.features = sorted.features[1:15]#
#
#
make.feature.subset = function(language) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Re-order the rows in terms of distance from center#
# (This is being done simply for now)#
	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
	#
	return(data.subset)#
}#
#
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")#
#
pdf("graphs/graph2ala.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.ala,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2arp.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.arp,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2awt.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.awt,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2kew.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.kew,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2kob.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.kob,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2yim.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.yim,Rowv=NA,Colv=NA)#
dev.off()
make.feature.subset = function(language) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
## Re-order the rows in terms of distance from center#
## (This is being done simply for now)#
#	data.subset = data.subset[order(data.subset$X.distance.from.centre),]#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
	#
	return(data.subset)#
}
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")
par(oma=c(2,2,2,16))#
heatmap(data.subset.ala,Rowv=NA,Colv=NA)
data.subset.ala = make.feature.subset("ala")#
data.subset.arp = make.feature.subset("arp")#
data.subset.awt = make.feature.subset("awt")#
data.subset.kew = make.feature.subset("kew")#
data.subset.kob = make.feature.subset("kob")#
data.subset.yim = make.feature.subset("yim")#
#
pdf("graphs/graph2ala.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.ala,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2arp.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.arp,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2awt.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.awt,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2kew.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.kew,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2kob.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.kob,Rowv=NA,Colv=NA)#
dev.off()#
#
pdf("graphs/graph2yim.pdf")#
par(oma=c(2,2,2,16))#
heatmap(data.subset.yim,Rowv=NA,Colv=NA)#
dev.off()
language
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
head(data.subset)
levels(data.subset$family)
table(data.subset$family)
table(geo_data$family)
language="yim"
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
table(data.subset$family)
language="kob"
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
table(data.subset$family)
language="kew"
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
table(data.subset$family)
language="arp"
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
table(data.subset$family)
language="awt"
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
table(data.subset$family)
?heatmap
?heatmap
language
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
head(data_subset)
head(data.subset)
family
families
levels(geo_data$family)
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} if(x=="Lower Sepik-Ramu") {"brown"} else {"red"})
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else {"red"})
	data.subset = t(data.subset[,11:ncol(data.subset)])
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=colcolors)
colcolors
ncol(data.subset)
length(colcolors)
class(colcolors)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=colcolors)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA)#,ColSideColors=colcolors)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA),ColSideColors=rep("red",18))
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=rep("red",18))
?heatmap
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=rep("red",ncol(x)))
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=rep("red",ncol(data.subset)))
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=NA)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors="red")
heatmap(matrix(c(1,2,3,4),ncol=2,nrow=2))
heatmap(matrix(c(1,2,3,4),ncol=2,nrow=2),ColSideColors="red")
heatmap(matrix(c(1,2,3,4),ncol=2,nrow=2),ColSideColors=rep("red",4))
heatmap(matrix(c(1,2,3,4),ncol=2,nrow=2),ColSideColors=rep("red",2))
ncol(data.subset)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA)
colcolors
length(colcolors)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=c(colcolors,"blue"))
data.subset$family
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
data.subset$family
length(data.subset$family)
length(data.subset$language)
length(data.subset$wals_code)
(data.subset$wals_code)
get.language(data.subset$wals_code)
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
	data.subset = t(data.subset[,11:ncol(data.subset)])
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=10)
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else {"red"})
	data.subset = t(data.subset[,11:ncol(data.subset)])
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=10)
	heatmap(data.subset.ala,Rowv=NA,Colv=NA,ColSideColors=c(colcolors,"blue"))
ncol(data.subset)
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]
data.subset$family
get.language(data.subset$wals_code)
rownames(data.subset)
	data.subset = t(data.subset[,11:ncol(data.subset)])
head(data.subset)
ncol(data.subset)
get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])
	rownames(data.subset) = get.feature(names(best.features),shift=10)
rownames(data.subset)
colnames(data.subset)
	heatmap(data.subset,Rowv=NA,Colv=NA,ColSideColors=colcolors)
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else if(x == "Marind") {"yellow"} else if(x == "Sentani") {"orange"} else if (x == "Sepik") {"blue"} else if(x=="Skou") {"green"} else if(x =="Torricelli") {"purple"} else {"red"})
	heatmap(data.subset,Rowv=NA,Colv=NA,ColSideColors=colcolors)
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Find the family information; this will allow us#
# to plot the right colors in the heatmap.#
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else if(x == "Marind") {"yellow"} else if(x == "Sentani") {"orange"} else if (x == "Sepik") {"blue"} else if(x=="Skou") {"green"} else if(x =="Torricelli") {"purple"} else {"red"})#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the columns and rows#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)
	heatmap(data.subset,Rowv=NA,Colv=NA,ColSideColors=colcolors)
make.feature.subset.heatmap = function(language,path) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Find the family information; this will allow us#
# to plot the right colors in the heatmap.#
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else if(x == "Marind") {"yellow"} else if(x == "Sentani") {"orange"} else if (x == "Sepik") {"blue"} else if(x=="Skou") {"green"} else if(x =="Torricelli") {"purple"} else {"red"})#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the columns and rows#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
#
# And voila!#
	pdf(path)#
	par(oma=c(2,2,2,16))#
	heatmap(data.subset,Rowv=NA,Colv=NA,ColSideColors=colcolors)#
	dev.off()#
}
make.feature.subset.heatmap("ala","graphs/graph2ala.pdf")#
make.feature.subset.heatmap("arp","graphs/graph2arp.pdf")#
make.feature.subset.heatmap("awt","graphs/graph2awt.pdf")#
make.feature.subset.heatmap("kew","graphs/graph2kew.pdf")#
make.feature.subset.heatmap("kob","graphs/graph2kob.pdf")#
make.feature.subset.heatmap("yim","graphs/graph2yim.pdf")
make.feature.subset.heatmap = function(language,path) {#
# Get the subset of the features we want, relative to#
# the center language we want#
	data.subset = geo_data[which(geo_data$center.language==language),c(1:10,(as.numeric(names(best.features))))]#
#
# Find the family information; this will allow us#
# to plot the right colors in the heatmap.#
	colcolors = sapply(data.subset$family,function(x) if(x=="Border") {"pink"} else if(x=="Lower Sepik-Ramu") {"brown"} else if(x == "Marind") {"yellow"} else if(x == "Sentani") {"orange"} else if (x == "Sepik") {"blue"} else if(x=="Skou") {"green"} else if(x =="Torricelli") {"purple"} else if(x == "Trans-New Guinea") {"red"} else {"white"})#
#
# Remove the non-feature columns and transpose the data#
	data.subset = t(data.subset[,11:ncol(data.subset)])#
#
# Set the names of the columns and rows#
	colnames(data.subset) = get.language(geo_data$wals_code[as.numeric(colnames(data.subset))])#
	rownames(data.subset) = get.feature(names(best.features),shift=10)#
#
# And voila!#
	pdf(path)#
	par(oma=c(2,2,2,16))#
	heatmap(data.subset,Rowv=NA,Colv=NA,ColSideColors=colcolors)#
	dev.off()#
}
make.feature.subset.heatmap("ala","graphs/graph2ala.pdf")#
make.feature.subset.heatmap("arp","graphs/graph2arp.pdf")#
make.feature.subset.heatmap("awt","graphs/graph2awt.pdf")#
make.feature.subset.heatmap("kew","graphs/graph2kew.pdf")#
make.feature.subset.heatmap("kob","graphs/graph2kob.pdf")#
make.feature.subset.heatmap("yim","graphs/graph2yim.pdf")
